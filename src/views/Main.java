package views;

import entities.*;
import entities.enums.TypeConsommation;
import services.UserService;
import services.CarbonRecordService;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.Scanner;

public class Main {
    private static UserService userService;
    private static CarbonRecordService carbonRecordService;

    public static void main(String[] args) {
        try {
            // Initialize the database connection
            Connection connection = DriverManager.getConnection("jdbc:postgresql://localhost:5432/GreenPulse", "GreenPulse", "");
            userService = new UserService(connection);
            carbonRecordService = new CarbonRecordService(connection);

            Scanner scanner = new Scanner(System.in);

            while (true) {
                System.out.println("1. Add User");
                System.out.println("2. View Users");
                System.out.println("3. Add Carbon Record");
                System.out.println("4. View Carbon Records");
                System.out.println("5. Exit");

                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                switch (choice) {
                    case 1:
                        addUser(scanner);
                        break;
                    case 2:
                        viewUsers();
                        break;
                    case 3:
                        addCarbonRecord(scanner);
                        break;
                    case 4:
                        viewCarbonRecords();
                        break;
                    case 5:
                        System.exit(0);
                        break;
                    default:
                        System.out.println("Invalid choice. Please try again.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void addUser(Scanner scanner) throws SQLException {
        System.out.print("Enter user name: ");
        String name = scanner.nextLine();
        System.out.print("Enter user age: ");
        int age = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        User user = new User(0, name, age);  // ID will be auto-generated by the database
        userService.createUser(user);

        System.out.println("User added successfully!");
    }

    private static void viewUsers() throws SQLException {
        System.out.println("Users:");
        for (User user : userService.getAllUsers()) {
            System.out.println(user);
        }
    }

    private static void addCarbonRecord(Scanner scanner) throws SQLException {
        System.out.println("Select carbon record type:");
        System.out.println("1. Transport");
        System.out.println("2. Logement");
        System.out.println("3. Alimentation");
        int typeChoice = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        System.out.print("Enter user ID: ");
        int userId = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        System.out.print("Enter start date (YYYY-MM-DD): ");
        LocalDate startDate = LocalDate.parse(scanner.nextLine());
        System.out.print("Enter end date (YYYY-MM-DD): ");
        LocalDate endDate = LocalDate.parse(scanner.nextLine());
        System.out.print("Enter amount: ");
        BigDecimal amount = new BigDecimal(scanner.nextLine());

        CarbonRecord record = null;
        switch (typeChoice) {
            case 1:
                System.out.print("Enter distance: ");
                double distance = scanner.nextDouble();
                scanner.nextLine(); // Consume newline
                System.out.print("Enter vehicle type: ");
                String vehicleType = scanner.nextLine();
                record = new Transport(startDate, endDate, amount, TypeConsommation.TRANSPORT, userId, distance, vehicleType);
                break;
            case 2:
                System.out.print("Enter energy consumption: ");
                double energyConsumption = scanner.nextDouble();
                scanner.nextLine(); // Consume newline
                System.out.print("Enter energy type: ");
                String energyType = scanner.nextLine();
                record = new Logement(startDate, endDate, amount, TypeConsommation.LOGEMENT, userId, energyConsumption, energyType);
                break;
            case 3:
                System.out.print("Enter food mass: ");
                double foodMass = scanner.nextDouble();
                scanner.nextLine(); // Consume newline
                System.out.print("Enter food type: ");
                String foodType = scanner.nextLine();
                record = new Alimentation(startDate, endDate, amount, TypeConsommation.ALIMENTATION, userId, foodMass, foodType);
                break;
            default:
                System.out.println("Invalid type choice.");
                return;
        }

        carbonRecordService.createCarbonRecord(record);
        System.out.println("Carbon record added successfully!");
    }

    private static void viewCarbonRecords() throws SQLException {
        System.out.println("Carbon Records:");
        for (CarbonRecord record : carbonRecordService.getAllCarbonRecords()) {
            System.out.println(record);
        }
    }
}
